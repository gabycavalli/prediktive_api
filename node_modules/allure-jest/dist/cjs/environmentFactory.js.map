{"version":3,"file":"environmentFactory.js","names":["_nodePath","require","_nodeProcess","_allureJsCommons","_interopRequireWildcard","allure","_sdk","_reporter","_runtime","_AllureJestTestRuntime","_utils","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","ownKeys","keys","getOwnPropertySymbols","o","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","_objectWithoutPropertiesLoose","indexOf","propertyIsEnumerable","_classPrivateMethodInitSpec","_checkPrivateRedeclaration","add","TypeError","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","String","Number","_assertClassBrand","createJestEnvironment","Base","_Class_brand","WeakSet","constructor","config","context","executables","steps","scopes","skippedTestsFullNamesByTestPlan","event","name","_handleHookStart","hook","_handleHookPass","_handleHookFail","error","_handleSuiteStart","_handleSuiteEnd","_handleTestScopeStart","_handleTestStart","test","_handleTestPass","_handleTestFail","_handleTestScopeStop","_handleTestSkip","_handleTestTodo","_handleRunFinish","projectConfig","_ref","testEnvironmentOptions","resultsDir","restConfig","runtime","ReporterRuntime","writer","createDefaultWriter","testPath","relative","rootDir","testPlan","parseTestPlan","testRuntime","AllureJestTestRuntime","global","setGlobalTestRuntime","setup","teardown","handleAllureRuntimeMessage","message","executableUuid","last","runContext","applyRuntimeMessages","_getTestFullName","testTitle","undefined","newTestSuitePath","getTestPath","parent","newTestPath","concat","newTestId","getTestId","getPosixPath","_startScope","_stopScope","shouldHookBeSkipped","scopeUuid","fixtureUuid","startFixture","type","pop","updateFixture","status","Status","PASSED","stage","Stage","FINISHED","stopFixture","BROKEN","getStatusFromError","statusDetails","trace","stack","_test$startedAt","cleanTitle","labels","links","extractMetadataFromString","newTestFullName","isTestPresentInTestPlan","mode","testUuid","startTest","fullName","start","startedAt","RUNNING","getLanguageLabel","getFrameworkLabel","getPackageLabel","getHostLabel","getThreadLabel","env","JEST_WORKER_ID","getEnvironmentLabels","getSuiteLabels","_tr","_tr2","details","_statusAndDetails","errors","tr","updateTest","result","SKIPPED","writeTest","startScope","writeScope","_test$duration","_currentExecutable","suppressedErrors","expect","getState","statusAndDetails","stopTest","duration","_test$duration2","includes","writeEnvironmentInfo","writeCategoriesDefinitions","hasMultipleErrors","Array","isArray","exception","firstError","_convertToError","secondError","getMessageAndTraceFromError","serialize","prototypeDescriptors","getPrototypeOf","protoClone","create","clone","exports"],"sources":["../../src/environmentFactory.ts"],"sourcesContent":["import type { EnvironmentContext, JestEnvironment, JestEnvironmentConfig } from \"@jest/environment\";\nimport type { Circus } from \"@jest/types\";\nimport { relative } from \"node:path\";\nimport { env } from \"node:process\";\nimport * as allure from \"allure-js-commons\";\nimport { Stage, Status, type StatusDetails, type TestResult } from \"allure-js-commons\";\nimport { type RuntimeMessage, type TestPlanV1, serialize } from \"allure-js-commons/sdk\";\nimport { extractMetadataFromString, getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getPackageLabel,\n  getPosixPath,\n  getSuiteLabels,\n  getThreadLabel,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport { setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport { AllureJestTestRuntime } from \"./AllureJestTestRuntime.js\";\nimport type { AllureJestConfig, AllureJestEnvironment, AllureJestProjectConfig, RunContext } from \"./model.js\";\nimport { getTestId, getTestPath, isTestPresentInTestPlan, last, shouldHookBeSkipped } from \"./utils.js\";\n\nconst createJestEnvironment = <T extends typeof JestEnvironment>(Base: T): T => {\n  // @ts-expect-error (ts(2545)) Incorrect assumption about a mixin class: https://github.com/microsoft/TypeScript/issues/37142\n  return class extends Base {\n    testPath: string;\n    testPlan?: TestPlanV1;\n    runtime: ReporterRuntime;\n    runContext: RunContext = {\n      executables: [],\n      steps: [],\n      scopes: [],\n      skippedTestsFullNamesByTestPlan: [],\n    };\n\n    // config is AllureJestConfig in Jest v28 or greater. In older versions\n    // it's AllureJestProjectConfig. See https://github.com/jestjs/jest/pull/12461\n    constructor(config: AllureJestConfig | AllureJestProjectConfig, context: EnvironmentContext) {\n      super(config as JestEnvironmentConfig, context);\n\n      const projectConfig = \"projectConfig\" in config ? config.projectConfig : config;\n      const { resultsDir, ...restConfig } = projectConfig?.testEnvironmentOptions || {};\n\n      this.runtime = new ReporterRuntime({\n        ...restConfig,\n        writer: createDefaultWriter({ resultsDir }),\n      });\n      this.testPath = relative(projectConfig.rootDir, context.testPath);\n      this.testPlan = parseTestPlan();\n\n      // @ts-ignore\n      const testRuntime = new AllureJestTestRuntime(this as AllureJestEnvironment, this.global);\n\n      // @ts-ignore\n      this.global.allure = allure;\n\n      setGlobalTestRuntime(testRuntime);\n    }\n\n    setup() {\n      return super.setup();\n    }\n\n    teardown() {\n      return super.teardown();\n    }\n\n    handleAllureRuntimeMessage(message: RuntimeMessage) {\n      const executableUuid = last(this.runContext.executables);\n\n      this.runtime.applyRuntimeMessages(executableUuid, [message]);\n    }\n\n    handleTestEvent = (event: Circus.Event) => {\n      switch (event.name) {\n        case \"hook_start\":\n          this.#handleHookStart(event.hook);\n          break;\n        case \"hook_success\":\n          this.#handleHookPass(event.hook);\n          break;\n        case \"hook_failure\":\n          this.#handleHookFail(event.hook, event.error);\n          break;\n        case \"run_describe_start\":\n          this.#handleSuiteStart();\n          break;\n        case \"run_describe_finish\":\n          this.#handleSuiteEnd();\n          break;\n        case \"test_start\":\n          this.#handleTestScopeStart();\n          break;\n        case \"test_fn_start\":\n          this.#handleTestStart(event.test);\n          break;\n        case \"test_fn_success\":\n          this.#handleTestPass(event.test);\n          break;\n        case \"test_fn_failure\":\n          this.#handleTestFail(event.test);\n          break;\n        case \"test_done\":\n          this.#handleTestScopeStop(event.test);\n          break;\n        case \"test_skip\":\n          this.#handleTestSkip(event.test);\n          break;\n        case \"test_todo\":\n          this.#handleTestTodo(event.test);\n          break;\n        case \"run_finish\":\n          this.#handleRunFinish();\n          break;\n        default:\n          break;\n      }\n    };\n\n    #getTestFullName(test: Circus.TestEntry, testTitle: string = test.name) {\n      const newTestSuitePath = getTestPath(test.parent);\n      const newTestPath = newTestSuitePath.concat(testTitle);\n      const newTestId = getTestId(newTestPath);\n\n      return `${getPosixPath(this.testPath)}#${newTestId}`;\n    }\n\n    #handleSuiteStart() {\n      this.#startScope();\n    }\n\n    #handleSuiteEnd() {\n      this.#stopScope();\n    }\n\n    #handleHookStart(hook: Circus.Hook) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const scopeUuid = last(this.runContext.scopes);\n      const fixtureUuid = this.runtime.startFixture(scopeUuid, /after/i.test(hook.type) ? \"after\" : \"before\", {\n        name: hook.type,\n      })!;\n\n      this.runContext.executables.push(fixtureUuid);\n    }\n\n    #handleHookPass(hook: Circus.Hook) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const fixtureUuid = this.runContext.executables.pop()!;\n\n      this.runtime.updateFixture(fixtureUuid, (r) => {\n        r.status = Status.PASSED;\n        r.stage = Stage.FINISHED;\n      });\n      this.runtime.stopFixture(fixtureUuid);\n    }\n\n    #handleHookFail(hook: Circus.Hook, error: string | Circus.Exception) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const fixtureUuid = this.runContext.executables.pop()!;\n      const status = typeof error === \"string\" ? Status.BROKEN : getStatusFromError(error as Error);\n\n      this.runtime.updateFixture(fixtureUuid, (r) => {\n        r.status = status;\n        r.statusDetails = {\n          message: typeof error === \"string\" ? error : error.message,\n          trace: typeof error === \"string\" ? undefined : error.stack,\n        };\n        r.stage = Stage.FINISHED;\n      });\n      this.runtime.stopFixture(fixtureUuid);\n    }\n\n    #handleTestStart(test: Circus.TestEntry) {\n      const newTestSuitePath = getTestPath(test.parent);\n      const { cleanTitle, labels, links } = extractMetadataFromString(test.name);\n      const newTestFullName = this.#getTestFullName(test, cleanTitle);\n\n      if (this.testPlan && !isTestPresentInTestPlan(newTestFullName, this.testPlan)) {\n        test.mode = \"skip\";\n        this.runContext.skippedTestsFullNamesByTestPlan.push(newTestFullName);\n        return;\n      }\n\n      const testUuid = this.runtime.startTest(\n        {\n          name: cleanTitle,\n          fullName: newTestFullName,\n          start: test.startedAt ?? undefined,\n          stage: Stage.RUNNING,\n          labels: [\n            getLanguageLabel(),\n            getFrameworkLabel(\"jest\"),\n            getPackageLabel(this.testPath),\n            getHostLabel(),\n            getThreadLabel(env.JEST_WORKER_ID),\n            ...getEnvironmentLabels(),\n            ...getSuiteLabels(newTestSuitePath),\n            ...labels,\n          ],\n          links,\n        },\n        this.runContext.scopes,\n      );\n\n      this.runContext.executables.push(testUuid);\n\n      return testUuid;\n    }\n\n    #handleTestScopeStart() {\n      this.#startScope();\n    }\n\n    #handleTestScopeStop(test: Circus.TestEntry) {\n      const testUuid = this.runContext.executables.pop();\n\n      if (testUuid) {\n        const { details } = this.#statusAndDetails(test.errors);\n        let tr: TestResult | undefined;\n        this.runtime.updateTest(testUuid, (result) => {\n          tr = result;\n        });\n        // hook failure, finish as skipped\n        if (tr?.status === undefined && tr?.stage === Stage.RUNNING) {\n          this.runtime.updateTest(testUuid, (result) => {\n            result.stage = Stage.FINISHED;\n            result.status = Status.SKIPPED;\n            result.statusDetails = {\n              ...result.statusDetails,\n              ...details,\n            };\n          });\n        }\n\n        this.runtime.writeTest(testUuid);\n      }\n\n      this.#stopScope();\n    }\n\n    #startScope() {\n      const scopeUuid = this.runtime.startScope();\n\n      this.runContext.scopes.push(scopeUuid);\n    }\n\n    #stopScope() {\n      const scopeUuid = this.runContext.scopes.pop();\n      if (!scopeUuid) {\n        return;\n      }\n\n      this.runtime.writeScope(scopeUuid);\n    }\n\n    #handleTestPass(test: Circus.TestEntry) {\n      const testUuid = this.#currentExecutable();\n\n      if (!testUuid) {\n        return;\n      }\n      // @ts-ignore\n      const { suppressedErrors = [] } = this.global.expect.getState();\n      const statusAndDetails = this.#statusAndDetails(suppressedErrors as Circus.TestError[]);\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = statusAndDetails.status;\n        result.statusDetails = {\n          ...result.statusDetails,\n          ...statusAndDetails.details,\n        };\n      });\n\n      this.runtime.stopTest(testUuid, { duration: test.duration ?? 0 });\n    }\n\n    #handleTestFail(test: Circus.TestEntry) {\n      const testUuid = this.#currentExecutable();\n\n      if (!testUuid) {\n        return;\n      }\n\n      const { status, details } = this.#statusAndDetails(test.errors);\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = status;\n        result.statusDetails = {\n          ...result.statusDetails,\n          ...details,\n        };\n      });\n      this.runtime.stopTest(testUuid, { duration: test.duration ?? 0 });\n    }\n\n    #handleTestSkip(test: Circus.TestEntry) {\n      const newTestFullName = this.#getTestFullName(test);\n\n      if (this.runContext.skippedTestsFullNamesByTestPlan.includes(newTestFullName)) {\n        return;\n      }\n\n      // noinspection JSPotentiallyInvalidUsageOfThis\n      const testUuid = this.#handleTestStart(test);\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = Status.SKIPPED;\n      });\n      // noinspection JSPotentiallyInvalidUsageOfThis\n      this.#handleTestScopeStop(test);\n    }\n\n    #handleTestTodo(test: Circus.TestEntry) {\n      // noinspection JSPotentiallyInvalidUsageOfThis\n      const testUuid = this.#handleTestStart(test);\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = Status.SKIPPED;\n        result.statusDetails = {\n          message: \"TODO\",\n        };\n      });\n      // noinspection JSPotentiallyInvalidUsageOfThis\n      this.#handleTestScopeStop(test);\n    }\n\n    #handleRunFinish() {\n      this.runtime.writeEnvironmentInfo();\n      this.runtime.writeCategoriesDefinitions();\n    }\n\n    #currentExecutable() {\n      if (this.runContext.executables.length === 0) {\n        return undefined;\n      }\n      return this.runContext.executables[this.runContext.executables.length - 1];\n    }\n\n    #statusAndDetails(errors: Circus.TestError[]): { status: Status; details: Partial<StatusDetails> } {\n      if (errors.length === 0) {\n        return {\n          status: Status.PASSED,\n          details: {},\n        };\n      }\n      // jest collects all errors, but we need to report the first one because it's a reason why the test has been failed\n      const [error] = errors;\n      const hasMultipleErrors = Array.isArray(error);\n      const exception: Circus.Exception = hasMultipleErrors ? error[0] : error;\n\n      const firstError = this.#convertToError(exception);\n\n      // in case user throws non-Error type, the first exception is the user-thrown object,\n      // while the second one is provided by jest and has correct stack trace\n      if (hasMultipleErrors && error.length > 1) {\n        const secondError = this.#convertToError(error[1]);\n        if (!firstError.message) {\n          firstError.message = secondError.message;\n        }\n        if (!firstError.stack) {\n          firstError.stack = secondError.stack;\n        }\n      }\n\n      const details = getMessageAndTraceFromError(firstError);\n      const status = getStatusFromError(firstError);\n      return { status, details };\n    }\n\n    #convertToError(exception: Circus.Exception):\n      | Error\n      | {\n          message?: string;\n          stack?: string;\n        } {\n      if (!exception) {\n        return {};\n      }\n      // user may throw an object as well\n      if (typeof exception !== \"object\" || !(\"stack\" in exception)) {\n        return {\n          message: serialize(exception),\n        };\n      }\n\n      const prototypeDescriptors = Object.getOwnPropertyDescriptors(Object.getPrototypeOf(exception));\n      const protoClone = Object.create(null, prototypeDescriptors);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      const clone = Object.create(protoClone, Object.getOwnPropertyDescriptors(exception));\n\n      return clone as\n        | Error\n        | {\n            message?: string;\n            stack?: string;\n          };\n    }\n  };\n};\n\nexport { createJestEnvironment };\n"],"mappings":"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","ignoreList":[]}